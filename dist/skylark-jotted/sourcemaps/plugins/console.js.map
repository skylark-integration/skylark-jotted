{"version":3,"sources":["plugins/console.js"],"names":["define","util","[object Object]","jotted","options","extend","autoClear","logCaptureSnippet","this","capture","toString","$nav","document","createElement","addClass","innerHTML","$pane","$container","appendChild","querySelector","$output","$input","$inputForm","$clear","addEventListener","submit","bind","history","clear","on","priority","change","window","getMessage","$jottedContainer","historyIndex","contentCache","html","css","js","getIframe","e","source","contentWindow","data","JSON","parse","err","type","log","message","params","callback","snippetlessContent","content","replace","forceRender","indexOf","console","oldConsoleLog","Function","prototype","call","slice","arguments","forEach","parent","postMessage","stringify","apply","$log","inputValue","value","trim","preventDefault","push","length","scriptOutput","eval","scrollTop","scrollHeight","gotHistory","selectionStart","keyCode"],"mappings":"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","file":"../../plugins/console.js","sourcesContent":["define(['../util'], function (util) {\n    'use strict';\n    return class PluginConsole {\n        constructor(jotted, options) {\n            options = util.extend(options, { autoClear: false });\n            var priority = 30;\n            var history = [];\n            var historyIndex = 0;\n            var logCaptureSnippet = `(${ this.capture.toString() })();`;\n            var contentCache = {\n                html: '',\n                css: '',\n                js: ''\n            };\n            var $nav = document.createElement('li');\n            util.addClass($nav, 'jotted-nav-item jotted-nav-item-console');\n            $nav.innerHTML = '<a href=\"#\" data-jotted-type=\"console\">JS Console</a>';\n            var $pane = document.createElement('div');\n            util.addClass($pane, 'jotted-pane jotted-pane-console');\n            $pane.innerHTML = `\n      <div class=\"jotted-console-container\">\n        <ul class=\"jotted-console-output\"></ul>\n        <form class=\"jotted-console-input\">\n          <input type=\"text\">\n        </form>\n      </div>\n      <button class=\"jotted-button jotted-console-clear\">Clear</button>\n    `;\n            jotted.$container.appendChild($pane);\n            jotted.$container.querySelector('.jotted-nav').appendChild($nav);\n            var $container = jotted.$container.querySelector('.jotted-console-container');\n            var $output = jotted.$container.querySelector('.jotted-console-output');\n            var $input = jotted.$container.querySelector('.jotted-console-input input');\n            var $inputForm = jotted.$container.querySelector('.jotted-console-input');\n            var $clear = jotted.$container.querySelector('.jotted-console-clear');\n            $inputForm.addEventListener('submit', this.submit.bind(this));\n            $input.addEventListener('keydown', this.history.bind(this));\n            $clear.addEventListener('click', this.clear.bind(this));\n            if (options.autoClear === true) {\n                jotted.on('change', this.autoClear.bind(this), priority - 1);\n            }\n            jotted.on('change', this.change.bind(this), priority);\n            window.addEventListener('message', this.getMessage.bind(this));\n            this.$jottedContainer = jotted.$container;\n            this.$container = $container;\n            this.$input = $input;\n            this.$output = $output;\n            this.history = history;\n            this.historyIndex = historyIndex;\n            this.logCaptureSnippet = logCaptureSnippet;\n            this.contentCache = contentCache;\n            this.getIframe = this.getIframe.bind(this);\n        }\n        getIframe() {\n            return this.$jottedContainer.querySelector('.jotted-pane-result iframe');\n        }\n        getMessage(e) {\n            if (e.source !== this.getIframe().contentWindow) {\n                return;\n            }\n            var data = {};\n            try {\n                data = JSON.parse(e.data);\n            } catch (err) {\n            }\n            if (data.type === 'jotted-console-log') {\n                this.log(data.message);\n            }\n        }\n        autoClear(params, callback) {\n            var snippetlessContent = params.content;\n            if (params.type === 'js') {\n                snippetlessContent = snippetlessContent.replace(this.logCaptureSnippet, '');\n            }\n            if (params.forceRender === true || this.contentCache[params.type] !== snippetlessContent) {\n                this.clear();\n            }\n            this.contentCache[params.type] = snippetlessContent;\n            callback(null, params);\n        }\n        change(params, callback) {\n            if (params.type !== 'js') {\n                return callback(null, params);\n            }\n            if (params.content.indexOf(this.logCaptureSnippet) === -1) {\n                params.content = `${ this.logCaptureSnippet }${ params.content }`;\n            }\n            callback(null, params);\n        }\n        capture() {\n            if (typeof window.console === 'undefined' || typeof window.console.log === 'undefined') {\n                window.console = {\n                    log: function () {\n                    }\n                };\n            }\n            var oldConsoleLog = Function.prototype.bind.call(window.console.log, window.console);\n            window.console.log = function () {\n                [].slice.call(arguments).forEach(function (message) {\n                    window.parent.postMessage(JSON.stringify({\n                        type: 'jotted-console-log',\n                        message: message\n                    }), '*');\n                });\n                oldConsoleLog.apply(oldConsoleLog, arguments);\n            };\n        }\n        log(message = '', type) {\n            var $log = document.createElement('li');\n            util.addClass($log, 'jotted-console-log');\n            if (typeof type !== 'undefined') {\n                util.addClass($log, `jotted-console-log-${ type }`);\n            }\n            $log.innerHTML = message;\n            this.$output.appendChild($log);\n        }\n        submit(e) {\n            var inputValue = this.$input.value.trim();\n            if (inputValue === '') {\n                return e.preventDefault();\n            }\n            this.history.push(inputValue);\n            this.historyIndex = this.history.length;\n            this.log(inputValue, 'history');\n            if (inputValue.indexOf('return') !== 0) {\n                inputValue = 'return ' + inputValue;\n            }\n            try {\n                var scriptOutput = this.getIframe().contentWindow.eval(`(function() {${ inputValue }})()`);\n                this.log(scriptOutput);\n            } catch (err) {\n                this.log(err, 'error');\n            }\n            this.$input.value = '';\n            this.$container.scrollTop = this.$container.scrollHeight;\n            e.preventDefault();\n        }\n        clear() {\n            this.$output.innerHTML = '';\n        }\n        history(e) {\n            var UP = 38;\n            var DOWN = 40;\n            var gotHistory = false;\n            var selectionStart = this.$input.selectionStart;\n            if (e.keyCode === UP && this.historyIndex !== 0 && selectionStart === 0) {\n                this.historyIndex--;\n                gotHistory = true;\n            }\n            if (e.keyCode === DOWN && this.historyIndex !== this.history.length - 1 && selectionStart === this.$input.value.length) {\n                this.historyIndex++;\n                gotHistory = true;\n            }\n            if (gotHistory) {\n                this.$input.value = this.history[this.historyIndex];\n            }\n        }\n    };\n});"]}