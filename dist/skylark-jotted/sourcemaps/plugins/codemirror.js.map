{"version":3,"sources":["plugins/codemirror.js"],"names":["define","CodeMirror","util","[object Object]","jotted","options","i","this","editor","modemap","html","extend","lineNumbers","$editors","$container","querySelectorAll","length","$textarea","querySelector","type","data","file","fromTextArea","setOption","getMode","on","change","bind","params","trigger","callback","cmEditor","setValue","content","editorChange","getValue"],"mappings":";;;;;;;AAAAA,QACI,gCACA,WACD,SAAUC,EAAWC,GACpB,aACA,aACIC,YAAYC,EAAQC,GAChB,IACIC,EACJC,KAAKC,UACLD,KAAKH,OAASA,EACd,IAAIK,GAAYC,KAAQ,aACxBL,EAAUH,EAAKS,OAAON,GAAWO,aAAa,IAI9C,IAAIC,EAAWT,EAAOU,WAAWC,iBAAiB,kBAClD,IAAKT,EAAI,EAAGA,EAAIO,EAASG,OAAQV,IAAK,CAClC,IAAIW,EAAYJ,EAASP,GAAGY,cAAc,YACtCC,EAAOjB,EAAKkB,KAAKH,EAAW,eAC5BI,EAAOnB,EAAKkB,KAAKH,EAAW,eAChCV,KAAKC,OAAOW,GAAQlB,EAAWqB,aAAaL,EAAWZ,GACvDE,KAAKC,OAAOW,GAAMI,UAAU,OAAQrB,EAAKsB,QAAQL,EAAME,EAAMZ,IAEjEL,EAAOqB,GAAG,SAAUlB,KAAKmB,OAAOC,KAAKpB,MAjBtB,GAmBnBJ,aAAayB,GACT,MAAO,KACHrB,KAAKH,OAAOyB,QAAQ,SAAUD,IAGtCzB,OAAOyB,EAAQE,GACX,IAAItB,EAASD,KAAKC,OAAOoB,EAAOT,MAC3BS,EAAOG,WACRvB,EAAOwB,SAASJ,EAAOK,SACvBL,EAAOG,SAAWvB,EAClBA,EAAOiB,GAAG,SAAUlB,KAAK2B,aAAaN,KAE1CA,EAAOK,QAAUzB,EAAO2B,WACxBL,EAAS,KAAMF","file":"../../plugins/codemirror.js","sourcesContent":["define([\n    'skylark-codemirror/CodeMirror',\n    '../util'\n], function (CodeMirror,util) {\n    'use strict';\n    return class PluginCodeMirror {\n        constructor(jotted, options) {\n            var priority = 1;\n            var i;\n            this.editor = {};\n            this.jotted = jotted;\n            var modemap = { 'html': 'htmlmixed' };\n            options = util.extend(options, { lineNumbers: true });\n            //if (typeof window.CodeMirror === 'undefined') {\n            //    return;\n            //}\n            var $editors = jotted.$container.querySelectorAll('.jotted-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = util.data($textarea, 'jotted-type');\n                let file = util.data($textarea, 'jotted-file');\n                this.editor[type] = CodeMirror.fromTextArea($textarea, options);\n                this.editor[type].setOption('mode', util.getMode(type, file, modemap));\n            }\n            jotted.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                this.jotted.trigger('change', params);\n            };\n        }\n        change(params, callback) {\n            var editor = this.editor[params.type];\n            if (!params.cmEditor) {\n                editor.setValue(params.content);\n                params.cmEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            params.content = editor.getValue();\n            callback(null, params);\n        }\n    };\n});"]}